import {
  INodePortInput, INodePositionChangeEvent, IGetters, IMutations,
} from '@/types';
import { calcPortPosition } from './graph';

// padding of grid, generated by path finding
export const GRID_PADDING = 150;
// scale factor, for minimize grid size
export const SCALE_FACTOR = 5;

export const DEFAULT_NODE_PADDING = SCALE_FACTOR * 2;

export const DEFAULT_PORT_GAP = SCALE_FACTOR * 2;

export const DEFAULT_MIN_ZOOM = 0.5;
export const DEFAULT_MAX_ZOOM = 1.5;

export const DEFAULT_GETTERS: IGetters = {
  getNodePosition (node: any) {
    return { x: node.x, y: node.y };
  },
  getNodeSize (node: any) {
    return { width: node.width, height: node.height };
  },
  getNodePorts (node: any) {
    const position = this.getNodePosition(node);
    const size = this.getNodeSize(node);
    const ports: INodePortInput[] = Object.values(node.ports);
    return calcPortPosition(ports, {
      ...size,
      ...position,
    }, DEFAULT_PORT_GAP);
  },
  getNode (nodes: any, nodeId: string) {
    return nodes[nodeId];
  },
  getStartPortOfLink (nodes: any, link: any) {
    const node = this.getNode(nodes, link.from.nodeId);
    const ports = this.getNodePorts(node);
    return ports[link.from.portId];
  },
  getDraftPortOfLink (link: any) {
    return { position: link.mousePosition };
  },
  isDraftLink (link: any) {
    return !(link.to && link.to.portId);
  },
  getEndPortOfLink (nodes: any, link: any) {
    if (this.isDraftLink(link)) {
      return this.getDraftPortOfLink(link);
    }
    const node = this.getNode(nodes, link.to.nodeId);
    const ports = this.getNodePorts(node);
    return ports[link.to.portId];
  },
  getLinkIdentifier (link: any) {
    return link.id;
  },
  getNodeIdentifier (node: any) {
    return node.id;
  },
  getPortIdentifier (port: any) {
    return port.id;
  },
};

export const DEFAULT_MUTATIONS: IMutations = {
  updateNodePosition (event: INodePositionChangeEvent) {
    const { node, position } = event;
    node.x = position.x;
    node.y = position.y;
  },
  setNodePosition (event: INodePositionChangeEvent) {
    const { node, position } = event;
    node.x = position.x;
    node.y = position.y;
  },
};
