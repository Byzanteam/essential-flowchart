import {
  INodePortInput, INodePositionChangeEvent, IGetters, IMutations,
} from '@/types';
import { calcPortPosition } from './graph';

// padding of grid, generated by path finding
export const GRID_PADDING = 150;
// scale factor, for minimize grid size
export const SCALE_FACTOR = 5;

export const DEFAULT_NODE_PADDING = SCALE_FACTOR * 2;

export const DEFAULT_PORT_GAP = SCALE_FACTOR * 2;

export const DEFAULT_MIN_ZOOM = 0.5;
export const DEFAULT_MAX_ZOOM = 1.5;

function getNodePosition (node: any) {
  return {
    x: node.x,
    y: node.y,
  };
}

function getNodeSize (node: any) {
  return {
    width: node.width,
    height: node.height,
  };
}
function getNodePorts (node: any) {
  const position = getNodePosition(node);
  const size = getNodeSize(node);
  const ports: INodePortInput[] = Object.values(node.ports);
  return calcPortPosition(ports, {
    ...size,
    ...position,
  }, DEFAULT_PORT_GAP);
}

function getNode (nodes: any, nodeId: string) {
  return nodes[nodeId];
}

function getStartPortOfLink (nodes: any, link: any) {
  const node = getNode(nodes, link.from.nodeId);
  const ports = getNodePorts(node);
  return ports[link.from.portId];
}


function getDraftPortOfLink (link: any) {
  return {
    position: link.mousePosition,
  };
}

function getEndPortOfLink (nodes: any, link: any) {
  if (link.to && link.to.portId) {
    const node = getNode(nodes, link.to.nodeId);
    const ports = getNodePorts(node);
    return ports[link.to.portId];
  }
  return getDraftPortOfLink(link);
}

export const DEFAULT_GETTERS: IGetters = {
  getNodePosition,
  getNodeSize,
  getNodePorts,
  getNode,
  getStartPortOfLink,
  getEndPortOfLink,
};

export const DEFAULT_MUTATIONS: IMutations = {
  updateNodePosition (event: INodePositionChangeEvent) {
    const { node, position } = event;
    node.x = position.x;
    node.y = position.y;
  },
  setNodePosition (event: INodePositionChangeEvent) {
    const { node, position } = event;
    node.x = position.x;
    node.y = position.y;
  },
};
