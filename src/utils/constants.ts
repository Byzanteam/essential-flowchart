import {
  INodePositionChangeEvent, IGetters, IMutations, PortDirection,
} from '@/types';

// padding of grid, generated by path finding
export const GRID_PADDING = 150;
// scale factor, for minimize grid size
export const SCALE_FACTOR = 5;

export const DEFAULT_NODE_PADDING = SCALE_FACTOR * 2;

export const DEFAULT_PORT_GAP = SCALE_FACTOR * 2;

export const DEFAULT_MIN_ZOOM = 0.5;
export const DEFAULT_MAX_ZOOM = 1.5;

/* eslint-disable @typescript-eslint/no-explicit-any */
export const DEFAULT_GETTERS: IGetters = {
  getNodePosition (node: any) {
    return { x: node.x, y: node.y };
  },
  getNodeSize (node: any) {
    return { width: node.width, height: node.height };
  },
  getNodePorts (node: any) {
    return node.ports;
  },
  getNodePort (node: any, portId: string) {
    const ports = this.getNodePorts(node);
    return ports[portId];
  },
  getPortDirection (port: any) {
    return port.direction;
  },
  getPortPosition (node: any, port: any) {
    const { x, y } = this.getNodePosition(node);
    const { width, height } = this.getNodeSize(node);
    switch (this.getPortDirection(port)) {
      case PortDirection.TOP:
        return { x: x + width / 2, y };
      case PortDirection.LEFT:
        return { x, y: y + height / 2 };
      case PortDirection.RIGHT:
        return { x: x + width, y: y + height / 2 };
      default:
        return { x: x + width / 2, y: y + height };
    }
  },
  getNode (nodes: any, nodeId: string) {
    return nodes[nodeId];
  },
  getStartNodeOfLink (nodes: any, link: any) {
    return this.getNode(nodes, link.from.nodeId);
  },
  getStartPortOfLink (nodes: any, link: any) {
    const node = this.getStartNodeOfLink(nodes, link);
    return this.getNodePort(node, link.from.portId);
  },
  getEndPortOfLink (nodes, link: any) {
    const node = this.getEndNodeOfLink(nodes, link);
    if (node) return this.getNodePort(node, link.to.portId);
    return this.getDraftPortOfLink(link);
  },
  getEndNodeOfLink (nodes: any, link: any) {
    if (this.isDraftLink(link)) {
      return null;
    }
    return this.getNode(nodes, link.to.nodeId);
  },
  getDraftPortOfLink (link: any) {
    return { position: link.mousePosition };
  },
  isDraftLink (link: any) {
    return !(link.to && link.to.portId);
  },
  getLinkIdentifier (link: any) {
    return link.id;
  },
  getNodeIdentifier (node: any) {
    return node.id;
  },
  getPortIdentifier (port: any) {
    return port.id;
  },
};
/* eslint-enable @typescript-eslint/no-explicit-any */

export const DEFAULT_MUTATIONS: IMutations = {
  updateNodePosition (event: INodePositionChangeEvent) {
    const { node, position } = event;
    node.x = position.x;
    node.y = position.y;
  },
  setNodePosition (event: INodePositionChangeEvent) {
    const { node, position } = event;
    node.x = position.x;
    node.y = position.y;
  },
};
